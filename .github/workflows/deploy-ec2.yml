name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/token-refresh-service:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create project directory if it doesn't exist
            mkdir -p ~/token-refresh-service
            cd ~/token-refresh-service
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/token-refresh-service:latest
            
            # Create .env file with secrets
            cat > .env << EOL
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ALGORITHM=HS256
            JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
            CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
            RATE_LIMIT_PER_MINUTE=60
            LOG_LEVEL=INFO
            AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}
            NETWORK_NAME=auth-network
            EOL
            
            # Create or update docker-compose.yml
            cat > docker-compose.yml << EOL
            version: '3.8'
            
            services:
              token-refresh-service:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/token-refresh-service:latest
                container_name: token-refresh-service
                restart: always
                ports:
                  - "8001:8000"
                env_file:
                  - .env
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/auth/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 10s
            
            networks:
              default:
                external: true
                name: \${NETWORK_NAME:-auth-network}
            EOL
            
            # Create network if it doesn't exist
            sudo docker network inspect auth-network >/dev/null 2>&1 || sudo docker network create auth-network
            
            # Stop and remove existing containers
            sudo docker-compose down
            
            # Start the service
            sudo docker-compose up -d
            
            # Clean up old images
            sudo docker image prune -af
