name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/token-refresh-service:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create project directory if it doesn't exist
            mkdir -p ~/token-refresh-service
            cd ~/token-refresh-service
            
            # Download docker-compose files
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
            curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            
            # Create .env file with secrets
            cat > .env << EOL
            JWT_SECRET=${JWT_SECRET:-${{ secrets.JWT_SECRET }}}
            JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
            JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
            CORS_ORIGINS=${CORS_ORIGINS:-${{ secrets.CORS_ORIGINS }}}
            RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
            LOG_LEVEL=${LOG_LEVEL:-INFO}
            AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-${{ secrets.AUTH_SERVICE_URL }}}
            EOL
            
            # Pull the latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/token-refresh-service:latest
            
            # Stop existing containers (if any) without removing volumes
            docker compose -f docker-compose.yml -f docker-compose.prod.yml stop || true
            
            # Start the containers with the new image
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -f
